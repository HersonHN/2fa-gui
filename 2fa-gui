#!/usr/bin/env python3

import subprocess
import sys
import gi

gi.require_version("Gtk", "4.0")
from gi.repository import Gtk


def main():
    app = TwoFactorApp(application_id="com.hersonhn.TwoFactorGui")
    app.run(sys.argv)

class TwoFactorApp(Gtk.Application):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.connect('activate', self.on_activate)

    def on_activate(self, app):
        names = get_2fa_names()
        self.win = TwoFactorWindow(names=names, application=app)
        self.win.present()

class TwoFactorWindow(Gtk.ApplicationWindow):
    def __init__(self, names, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.set_size_request(250, 300)
        self.set_default_size(250, 400)

        self.sw = Gtk.ScrolledWindow()
        self.grid = Gtk.Grid()
        self.grid.set_row_spacing(10)
        self.grid.set_column_spacing(0)
        self.grid.set_margin_bottom(10)
        self.grid.set_margin_end(10)
        self.grid.set_margin_start(10)
        self.grid.set_margin_top(10)

        for nrow, name in enumerate(names):
            item = TwoFactorItem(name=name)
            self.grid.attach(item, 0, nrow, 1, 1)

        self.sw.set_child(self.grid)
        self.set_child(self.sw)

class TwoFactorItem(Gtk.Box):
    def __init__(self, name):
        super().__init__(spacing=6)
        self.app_name = name
        self.button = Gtk.Button(label=name)
        self.button.connect("clicked", self.clicked)
        self.button.set_size_request(100, 30)
        self.append(self.button)

        self.label = Gtk.Label()
        self.label.set_size_request(100, 30)
        self.label.set_selectable(True)
        self.append(self.label)

    def clicked(self, widget):
        result = get_code(self.app_name)
        print("app:", self.app_name, "code:", result)

        self.label.set_markup('<span font_family="monospace" size="large">' + result + '</span>')

def get_2fa_names():
    result = subprocess.check_output(['2fa', '-list'])
    names = result.decode('utf-8').strip().split('\n')
    names.sort()
    return names

def get_code(app_name):
    result = subprocess.check_output(['2fa', '-clip', app_name])
    return result.decode('utf-8').strip()

main()
